package com.fisher.extract.defs;

import groovy.text.SimpleTemplateEngine

/**
 * An import to a table in tracker3 is defined in this class
 * <p>
 * The 'to' field is the table that will be populated in the target database.
 * The 'sourceSql' parameter should specify the sql to run against the source database
 * The 'tableSeq' is the sequence that will generate primary keys in the given table.  If this option is specified then
 * at least one of the member field transform definitions should have the useSeq field set to true 
 */
class TableTransformDef {
	def to
	def fieldTransformDefs
	def sourceSql
	def tableSeq
	def logModificationData = false
	
	def assertInvariant() {
		assert to, "Configuration Error: TableTransformDef.to is a required parameter"
		assert fieldTransformDefs.size() > 0, "Configuration Error: field transforms are missing from this table transform"
		assert sourceSql, "Configuration Error: TableTransformDef.sourceSql is requried"
		
		def autogenColCount = 0
		fieldTransformDefs.each {
			if (it.useSeq) {
				autogenColCount++
			}
		}
		if (autogenColCount == 0) {
			assert tableSeq == null, "Configuration Error: TableTransformDef.tableSeq should not be defined for transforms that dont require autogenerated fields"
		} else if (autogenColCount == 1) {
			assert tableSeq != null, "Configuration Error: TableTransformDef.tableSeq should be defined so that a key can be generated for the defined autogenerated field"
			assert tableSeq != "", "Configuration Error: TableTransformDef.tableSeq should be defined so that a key can be generated for the defined autogenerated field"
		} else {
			assert false, "Configuration Error: only one autogenerated field can be defined per table transform"
		}
		
		if (tableSeq) {
			assert tableSeq.contains(to), "Warning: in most cases the sequence for a table in the tracker db is named after the table itself"
		}
	}
}
