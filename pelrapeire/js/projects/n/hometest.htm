
<html>
	<head>
		<script type="text/javascript" charset="utf-8" src="../../yui/build/yui/yui-debug.js"></script>
		<script type="text/javascript" charset="utf-8" src="./server.js" ></script>
		<script type="text/javascript" charset="utf-8" src="./task.js" ></script>
		<script type="text/javascript" charset="utf-8" src="./tasklist.js" ></script>
		<script type="text/javascript" charset="utf-8" src="./home.js" ></script>
		<script>var serverData = {"project-name" : "PicoMinMin"};</script>
	</head>
	<body class="yui3-skin-sam">
		<h1>home.js test</h1>
		
		<script type="text/javascript">
			YUI({
    			base: '../../yui/build/',
    			filter: "debug",
    			logInclude: { TestRunner: true}
			}).use('node-event-simulate', 'test','console', 
					'dd-drop', 'dd-proxy', 'node-base', 
					'io', 'event', 'json-parse', 
					'querystring-stringify-simple', 'server', 'task', 
					'tasklist', function (Y) {
						
				var mockServer = {
					createTask: function(obj) {
						Y.Assert.isNotUndefined(obj.uri);
						Y.Assert.isNotUndefined(obj.sourceForm);
						this.called = 'createTask';
					},
					updateAppendTask: function(obj) {
						Y.Assert.isNotUndefined(obj.task);
						this.called = 'updateAppendTask';
					},
					getTask: function(obj) {
						Y.Assert.isNotUndefined(obj.id);
						this.called = 'getTask';
					}
				};						
				
				var testcase = new Y.Test.Case({
					name: "home test",
					
					testSuccessfulFormCreation: function() {
						Y.one('#new').simulate('click');
						var ndParent = Y.one('#proposed div.tasks');
						Y.Assert.isNotNull(ndParent);
						var ns = ndParent.get('children');
						Y.Assert.areEqual(1, ns.size(), 'should have only one node')
						Y.Assert.areEqual("newTaskForm", ns.item(0).get('id'), 'should find the root of the form');

					},
					
					testSuccessfulFormDestruction: function() {
						var ancCancel = Y.one('#newTaskCanceler');
						Y.Assert.isNotNull(ancCancel);  //i expect this to exist from the above test
						ancCancel.simulate('click');
						var ndParent = Y.one('#proposed div.tasks');
						var ns = ndParent.get('children');
						Y.Assert.areEqual(0, ns.size());
					},
					
					testWeShouldOnlyBeAbleToCreateOneFormAtATime: function () {
						Y.one('#new').simulate('click');
						Y.one('#new').simulate('click');
						var ndParent = Y.one('#proposed div.tasks');
						var ns = ndParent.get('children');
						Y.Assert.areEqual(1, ns.size(), 'we should not be able to create two forms at the same time');
						Y.one('#newTaskCanceler').simulate('click');
						ns = ndParent.get('children');
						Y.Assert.areEqual(0, ns.size(), 'we should be able to destroy the form we just created');
					},
					/**
					 * when we initialize a table the only nodes below the root node should take on
					 * dragable or dropable class types
					 */
					testInitializeANodeList: function() {
						var ns = Y.all('div.bmrcp-head');
						var count = 0;
						Y.each(ns, function(v, k){
							if (v.test('.yui3-dd-drop')) {
								count++;
							}
						});
						Y.Assert.areEqual(4, ns.size(), 'there are 4 nodes total');
						Y.Assert.areEqual(3, count, 'only three nodes should be droppable');
					},
					//the create functionality should create one task that is both draggable
					//and dropable
					testShouldBeAbleToCreateANewTask: function() {
						var proposedTasks = new Y.hokulea.TaskList({
							name: 'proposed',
							root: Y.one('#proposed'),
							dragSelector: 'div.tasks table.task',
							dropSelector: 'table.task, div.bmrcp-head',
							server: mockServer
							});
						
						var initialCount = Y.one('#proposed div.tasks').get('children').size();
						proposedTasks.addNewTask({
							"title":"find a good height for the task boxes",
							"specification":"the task boxes should have at least twice the vertical height as they currently have",
							"deliversUserFunctionality":false,
							"project":"PicoMinMin",
							"type":"task",
							"progress":"proposed",
							"_rev":"1-fe84a1a782cd5dff145623efbc86e213",
							"_id":"ec1d1fcfdf43deaa33b17499c2535154"}
						);
						var ns = Y.one('#proposed div.tasks').get('children');
						var finalCount = ns.size();
						Y.Assert.areEqual(initialCount + 1, finalCount);
						Y.Assert.isTrue(ns.item(0).test('.yui3-dd-drop'));
						Y.Assert.isTrue(ns.item(0).test('.yui3-dd-draggable'));
					},

					/**
					 * given an id a task list should be able to return a task object to us
					 */
					testGetTaskFromATaskList: function() {
						var taskList = new Y.hokulea.TaskList({
							name: 'teste',
							root: Y.one('#testBucket'),
							dropSelector: 'div.bmrcp-head',
							server: mockServer
						});
						var task = taskList.getTask('34c9c3adade7da214b70f96ea1418abc');
						Y.Assert.isNotNull(task);
						var actual = task.getRevision();
						Y.Assert.areEqual(actual, '1-ca66e995fa34333d682f04a00e98c3cc');
					}

					//when we add a new task we should also update the tasks in the task list
					
				});
		
			    var yconsole = new Y.Console({newestOnTop: false});
			    yconsole.render('#logger');
				Y.Test.Runner.add(testcase);
			    Y.Test.Runner.run();

			});
		</script>
		
		<a href="#" id="new">new</a>
		<table class="buckets">
			<tbody>
				<tr>
					<td id="proposed" class="bucket">
						<div class="bmrcp-head">waiting to start</div>
						<div class="tasks">
						</div>
					</td>
					<td id="in-progress" class="bucket">
						<div class="bmrcp-head">work in progress</div>
						<div class="tasks"></div>
					</td>
					<td id="delivered" class="bucket">
						<div class="bmrcp-head">delivered to user</div>
						<div class="tasks">
							<!-- below is a example task to test the Task object -->
							<table id="64dca73821060386b52188b6cc8e5a89.1-d44f047f8b364777d96a8fa2b993de14" class="task yui3-dd-drop yui3-dd-draggable">
								<tbody>
									<tr>
										<td class="rawData">
											{"specification":"","priority":2,"_rev":"1-d44f047f8b364777d96a8fa2b993de14","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"64dca73821060386b52188b6cc8e5a89","type":"task","namespace":[]}
										</td>										
										<td><a href="#" class="collapsible">+</a></td>
										<td class="title">add task detail expansion functionality</td>
										<td class="statistic">0</td>
									</tr>
								</tbody>
							</table>							
						</div>
					</td>
				</tr>
			</tbody>
		</table>
		
		<div class="bmrcp-head"></div>
		
		<!-- a task nodes for testing serialization of priority values. Im also using
		these to test task to form conversion so I am being destructive with the second
		set of tests -->
		<table>
			<tr>
				<td id="testBucket" class="bucket">
					<div class="tasks">
						<table class="task" id="34c9c3adade7da214b70f96ea1418abb.1-ca66e995fa34333d682f04a00e98c3cb">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"1-ca66e995fa34333d682f04a00e98c3cb","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"34c9c3adade7da214b70f96ea1418abb","type":"task","namespace":[]}
								</td>								
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-off.gif" title="low" />
									<img class="clickable" src="/img/star-off.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<table class="task" id="34c9c3adade7da214b70f96ea1418abc.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"1-ca66e995fa34333d682f04a00e98c3cc","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"34c9c3adade7da214b70f96ea1418abc","type":"task","namespace":[]}
								</td>								
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>			
					</div>	
				</td>
			</tr>
		</table>
		
		<table id="ff5e24a8b1351764edde8e98c74fc99d.7-e83166bf9a306826e1d2dbd4811e114e" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody>
				<tr>
					<td class="rawData">{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">we want to add tagging to the tasks</td>
					<td class="priority">
						<img title="low" src="/img/star-on.gif" class="clickable">
						<img title="medium" src="/img/star-on.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>
		
		<table id="f6c73e27c5e4258c8457e8bfaf1a79c4.1-b81de00d061621947aac747f794b01af" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody
				><tr>
					<td class="rawData">{"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">store dates as UCT</td>
					<td class="priority">
						<img title="low" src="/img/star-off.gif" class="clickable">
						<img title="medium" src="/img/star-off.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>

		
	</body>
</html>