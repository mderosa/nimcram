
<html>
	<head>
		<script type="text/javascript" charset="utf-8" src="../../yui/build/yui/yui-debug.js"></script>
		<script type="text/javascript" charset="utf-8" src="./home.js" ></script>
		<script>var serverData = {"project-name" : "PicoMinMin"}</script>
	</head>
	<body class="yui3-skin-sam">
		<h1>home.js test</h1>
		
		<script type="text/javascript">
			YUI({
    			base: '../../yui/build/',
    			filter: "debug",
    			logInclude: { TestRunner: true}
			}).use('node-event-simulate', 'test','console', 'dd-drop', 'dd-proxy', 'node-base', 'io', function (Y) {
				
				var testcase = new Y.Test.Case({
					name: "home test",
					
					testSuccessfulFormCreation: function() {
						Y.one('#new').simulate('click');
						var ndParent = Y.one('#backburner div.tasks');
						Y.Assert.isNotNull(ndParent);
						var ns = ndParent.get('children');
						Y.Assert.areEqual(1, ns.size(), 'should have only one node')
						Y.Assert.areEqual("newTaskForm", ns.item(0).get('id'), 'should find the root of the form');

					},
					
					testSuccessfulFormDestruction: function() {
						var ancCancel = Y.one('#newTaskCanceler');
						Y.Assert.isNotNull(ancCancel);  //i expect this to exist from the above test
						ancCancel.simulate('click');
						var ndParent = Y.one('#backburner div.tasks');
						var ns = ndParent.get('children');
						Y.Assert.areEqual(0, ns.size());
					},
					
					testWeShouldOnlyBeAbleToCreateOneFormAtATime: function () {
						Y.one('#new').simulate('click');
						Y.one('#new').simulate('click');
						var ndParent = Y.one('#backburner div.tasks');
						var ns = ndParent.get('children');
						Y.Assert.areEqual(1, ns.size(), 'we should not be able to create two forms at the same time');
						Y.one('#newTaskCanceler').simulate('click');
						ns = ndParent.get('children');
						Y.Assert.areEqual(0, ns.size(), 'we should be able to destroy the form we just created');
					},
					/**
					 * when we initialize a table the only nodes below the root node should take on
					 * dragable or dropable class types
					 */
					testInitializeANodeList: function() {
						var ns = Y.all('div.bmrcp-head');
						var count = 0;
						Y.each(ns, function(v, k){
							if (v.test('.yui3-dd-drop')) {
								count++;
							}
						});
						Y.Assert.areEqual(4, ns.size(), 'there are 4 nodes total');
						Y.Assert.areEqual(3, count, 'only three nodes should be droppable');
					}

				});
		
			    var yconsole = new Y.Console({newestOnTop: false});
			    yconsole.render('#logger');
				Y.Test.Runner.add(testcase);
			    Y.Test.Runner.run();

			});
		</script>
		
		<a href="#" id="new">new</a>
		<table class="buckets">
			<tbody>
				<tr>
					<td id="backburner" class="bucket">
						<div class="bmrcp-head">waiting to start</div>
						<div class="tasks"></div>
					</td>
					<td id="active" class="bucket">
						<div class="bmrcp-head">work in progress</div>
						<div class="tasks"></div>
					</td>
					<td id="live" class="bucket">
						<div class="bmrcp-head">delivered to user</div>
						<div class="tasks"></div>
					</td>
				</tr>
			</tbody>
		</table>
		
		<div class="bmrcp-head"></div>
		
	</body>
</html>