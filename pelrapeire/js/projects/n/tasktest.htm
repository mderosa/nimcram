
<html>
	<head>
		<script type="text/javascript" charset="utf-8" src="../../yui/build/yui/yui-debug.js"></script>
		<script>var serverData = {"project-name" : "PicoMinMin"};</script>
	</head>
	<body class="yui3-skin-sam">
		<h1>task.js test</h1>
		
		<script type="text/javascript">
			YUI({
    			base: '../../yui/build/',
    			filter: "debug",
    			logInclude: { TestRunner: true},
				groups: {
					hokulea: {
						combine: false,
						base: './',
						filter: 'raw',
						modules: {
							task: {
								path: 'task.js'
							}
						}
					}
				}
			}).use('node-event-simulate', 'test','console', 
					'dd-drop', 'dd-proxy', 'node-base', 
					'io', 'event', 'json-parse', 
					'querystring-stringify-simple', 'task', function (Y) {
				var mockServer = {
					createTask: function(obj) {
						Y.Assert.isNotUndefined(obj.uri);
						Y.Assert.isNotUndefined(obj.sourceForm);
						this.called = 'createTask';
					},
					updateAppendTask: function(obj) {
						Y.Assert.isNotUndefined(obj.task);
						this.called = 'updateAppendTask';
					},
					getTask: function(obj) {
						Y.Assert.isNotUndefined(obj.id);
						this.called = 'getTask';
					}
				}
				var testcase = new Y.Test.Case({
					name: "task test",
					
					/**
					 * we want the task object to serialize at least its '_id' and
					 * '_rev'; we also want it to serialize its 'progress' and lastly
					 * whatever other info it can devine
					 */
					testSerializationOfTaskObject: function() {
						var el = document.getElementById('64dca73821060386b52188b6cc8e5a89.1-d44f047f8b364777d96a8fa2b993de14');
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						var json = t.serialize("update-progress");
						Y.Assert.areEqual("64dca73821060386b52188b6cc8e5a89", json._id, 'expect and id');
						Y.Assert.areEqual("1-d44f047f8b364777d96a8fa2b993de14", json._rev, 'expect a rev');
						Y.Assert.areEqual("delivered", json.progress, 'expect a value of delivered');
						Y.Assert.areEqual("update-progress", json.action, 'should find an action');
					},
					/**
					 * test that we can serialize the priority property of a task when it exists
					 */
					testSerializationOfTaskObjectsThatHavePriorities: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418abb.1-ca66e995fa34333d682f04a00e98c3cb');
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						var json = t.serialize('update-priority');
						Y.Assert.areEqual(null, json.priority);
						Y.Assert.areEqual('update-priority', json.action);
						
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418abc.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						var json = t.serialize('update-priority');
						Y.Assert.areEqual(2, json.priority);
						Y.Assert.areEqual(json._id, '34c9c3adade7da214b70f96ea1418abc');
						Y.Assert.areEqual(json._rev, '1-ca66e995fa34333d682f04a00e98c3cc');
					},
					/**
					 * this is a destructive test that takes a task table and transforms it into a task form.
					 * its inverse test will be run below.
					 */
					testWeShouldBeAbleToTransformATaskBoxToATaskForm: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418ac1.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						t.renderAsTaskForm();
						el = document.getElementById('34c9c3adade7da214b70f96ea1418ac1.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.areEqual("FORM", el.tagName);
						Y.Assert.isTrue(t.isInFormMode());
					},
					/**
					 * this is a destructive test that takes a task form and changes it into a task table. It should
					 * does the inverse of the above test, set all handlers
					 */
					testWeShouldBeAbleToTransformATaskFormToATaskBox: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418ac1.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						
						var rawData = {
							_id: '34c9c3adade7da214b70f96ea1418ac1',
							_rev: '1-ca66e995fa34333d682f04a00e98c3cc',
							type: 'task',
							title: 'a test form title',
							specification: 'this is a test specification',
							project: 'PicoMinMin',
							solutionTeam: ['marc.derosa@gmail.com', 'micai@ebay.com'],
							deliversUserFunctionality: true,
							priority: null,
							progress: 'proposed',
							namespace: [{release: 'e662.indexer-shj-01'}, {project: 'project1.indexer'}]
						};
						var t = new Y.hokulea.Task({node: nd, server: mockServer}, rawData);
						t.renderAsTaskTable(null, rawData);
						el = document.getElementById('34c9c3adade7da214b70f96ea1418ac1.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.areEqual("TABLE", el.tagName);
					}, 
					testRenderTaskFormNamespaces: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418abf.1-ca66e995fa34333d682f04a00e98c3cc');
						var t = new Y.hokulea.Task({node: Y.one(el), server: mockServer});
						var html = t._renderTaskFormNamespaces([{release: 'e662.indexer'}, {project: 'projectA.feature1'}]);
						var matches = html.match(/release=e662.indexer/);
						Y.Assert.isNotNull(matches);
						matches = html.match(/project=projectA.feature1/);
						Y.Assert.isNotNull(matches);
					},
					testRenderTaskTablePriorities: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418abe.1-ca66e995fa34333d682f04a00e98c3cc');
						var t = new Y.hokulea.Task({node: Y.one(el), server: mockServer});
						var taskData = {
							_id: '34c9c3adade7da214b70f96ea1418abe',
							_rev: '1-ca66e995fa34333d682f04a00e98c3cc',
							type: 'task',
							title: 'a test form title',
							specification: 'this is a test specification',
							project: 'PicoMinMin',
							solutionTeam: ['marc.derosa@gmail.com', 'micai@ebay.com'],
							deliversUserFunctionality: true,
							priority: null,
							progress: 'proposed',
							namespace: [{release: 'e662.indexer-shj-01'}, {project: 'project1.indexer'}]
						};
						var html = t._renderTaskTablePriorities(taskData);
						var matches = html.match(/star-on.gif/);
						Y.Assert.isNull(matches, "the priority is null so we dont want any stars 'on'");
						matches = html.match(/off/);
						Y.Assert.isNotNull(matches, "we should have three stars off");
					},
					//test _renderTaskTableDaysActive
					testRenderTaskTableDaysActive: function() {
						var el = document.getElementById('34c9c3adade7da214b70f96ea1418abd.1-ca66e995fa34333d682f04a00e98c3cc');
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						Y.Assert.isTrue(t.isValid());
						
						t.taskData = {
							_id: '34c9c3adade7da214b70f96ea1418abc',
							_rev: '1-ca66e995fa34333d682f04a00e98c3cc',
							type: 'task',
							title: 'a test form title',
							specification: 'this is a test specification',
							project: 'PicoMinMin',
							solutionTeam: ['marc.derosa@gmail.com', 'micai@ebay.com'],
							deliversUserFunctionality: true,
							priority: null,
							progress: 'proposed',
							namespace: [{release: 'e662.indexer-shj-01'}, {project: 'project1.indexer'}],
							taskCreateDate: [2010, 8, 17, 12, 4, 23],  
							taskStartDate: [2010, 8, 27, 9, 30, 12],
							taskCompleteDate: null
						};
						var html = t._renderTaskTableDaysActive(t.taskData);
						var matches = html.match(/<td class="statistic">\d+</);
						Y.Assert.isNotNull(matches, "should have a whole number in the td element");
					},
					testATaskShouldFullyInitializeOnStartup: function () {
						var id = 'ff5e24a8b1351764edde8e98c74fc99d.7-e83166bf9a306826e1d2dbd4811e114e';
						var el = document.getElementById(id);
						Y.Assert.isNotNull(el);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						Y.Assert.isTrue(t.isValid());
						Y.Assert.isNotNull(t.taskData);
						Y.Assert.areEqual('ff5e24a8b1351764edde8e98c74fc99d', t.taskData._id);
						Y.Assert.areEqual('proposed', t.taskData.progress);
					},
					testPriorityDisplayHandler: function() {
						var id = 'f6c73e27c5e4258c8457e8bfaf1a79c5.1-b81de00d061621947aac747f794b01af';
						var el = document.getElementById(id);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						Y.Assert.isNotNull(t);
						nd.one('#tpdh_low').simulate('click');
						Y.Assert.areEqual('updateAppendTask', mockServer.called);
					},
					/**
					 * test form serialization when we are showing days in process stats
					 */
					testGetIdForForms: function() {
						var id = 'a5ce4479660b9334deeb288eb5166f60.3-6db398380e045d2b6d208cddeca84979';
						var el = document.getElementById(id);
						var nd = Y.one(el);
						var t = new Y.hokulea.Task({node: nd, server: mockServer});
						t.renderAsTaskForm();
						Y.Assert.areEqual('a5ce4479660b9334deeb288eb5166f60', t.getId());
					}
					
				});
		
			    var yconsole = new Y.Console({newestOnTop: false});
			    yconsole.render('#logger');
				Y.Test.Runner.add(testcase);
			    Y.Test.Runner.run();

			});
		</script>
		
		<a href="#" id="new">new</a>
		<table class="buckets">
			<tbody>
				<tr>
					<td id="proposed" class="bucket">
						<div class="bmrcp-head">waiting to start</div>
						<div class="tasks">
						</div>
					</td>
					<td id="in-progress" class="bucket">
						<div class="bmrcp-head">work in progress</div>
						<div class="tasks"></div>
					</td>
					<td id="delivered" class="bucket">
						<div class="bmrcp-head">delivered to user</div>
						<div class="tasks">
							<!-- below is a example task to test the Task object -->
							<table id="64dca73821060386b52188b6cc8e5a89.1-d44f047f8b364777d96a8fa2b993de14" class="task yui3-dd-drop yui3-dd-draggable">
								<tbody>
									<tr>
										<td class="rawData">
											{"specification":"","priority":2,"_rev":"1-d44f047f8b364777d96a8fa2b993de14","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"64dca73821060386b52188b6cc8e5a89","type":"task","namespace":[]}
										</td>
										<td><a href="#" class="collapsible">+</a></td>
										<td class="title">add task detail expansion functionality</td>
										<td class="statistic">0</td>
									</tr>
								</tbody>
							</table>							
						</div>
					</td>
				</tr>
			</tbody>
		</table>
		
		<div class="bmrcp-head"></div>
		
		<!-- a task nodes for testing serialization of priority values. Im also using
		these to test task to form conversion so I am being destructive with the second
		set of tests -->
		<table>
			<tr>
				<td id="testBucket" class="bucket">
					<div class="tasks">
						<table class="task" id="34c9c3adade7da214b70f96ea1418abb.1-ca66e995fa34333d682f04a00e98c3cb">
							<tr>
								<td class="rawData">{"specification":"","priority":2,"_rev":"1-ca66e995fa34333d682f04a00e98c3cb","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"34c9c3adade7da214b70f96ea1418abb","type":"task","namespace":[]}</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-off.gif" title="low" />
									<img class="clickable" src="/img/star-off.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<!-- below used by testSerializationOfTaskObjectsThatHavePriorities -->
						<table class="task" id="34c9c3adade7da214b70f96ea1418abc.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}
								</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<!-- below used by testRenderTaskTableDaysActive -->
						<table class="task" id="34c9c3adade7da214b70f96ea1418abd.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}
								</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<!-- renderTaskTablePriorities -->
						<table class="task" id="34c9c3adade7da214b70f96ea1418abe.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}
								</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>	
						<!-- testRenderTaskFormNamespaces -->
						<table class="task" id="34c9c3adade7da214b70f96ea1418abf.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}
								</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<!-- testWeShouldBeAbleToTransformATaskBoxToATaskForm -->
						<table class="task" id="34c9c3adade7da214b70f96ea1418ac1.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"_id": "34c9c3adade7da214b70f96ea1418ac1","_rev": "1-ca66e995fa34333d682f04a00e98c3cc","type": "task","title": "a test form title","specification": "this is a test specification","project": "PicoMinMin","solutionTeam": ["marc.derosa@gmail.com", "micai@ebay.com"],"deliversUserFunctionality": true,"priority": null,"namespace": [{"release": "e662.indexer-shj-01"}]}
								</td>
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>																	
					</div>	
				</td>
			</tr>
		</table>
		<div></div>
		<table id="ff5e24a8b1351764edde8e98c74fc99d.7-e83166bf9a306826e1d2dbd4811e114e" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody>
				<tr>
					<td class="rawData">{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">we want to add tagging to the tasks</td>
					<td class="priority">
						<img title="low" src="/img/star-on.gif" class="clickable">
						<img title="medium" src="/img/star-on.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>
		
		<table id="f6c73e27c5e4258c8457e8bfaf1a79c4.1-b81de00d061621947aac747f794b01af" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody
				><tr>
					<td class="rawData">{"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">store dates as UCT</td>
					<td class="priority">
						<img title="low" src="/img/star-off.gif" class="clickable">
						<img title="medium" src="/img/star-off.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>
		<!-- below used by testPriorityDisplayHandler -->
		<table id="f6c73e27c5e4258c8457e8bfaf1a79c5.1-b81de00d061621947aac747f794b01af" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody
				><tr>
					<td class="rawData">{"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">store dates as UCT</td>
					<td class="priority">
						<img id="tpdh_low" title="low" src="/img/star-off.gif" class="clickable">
						<img title="medium" src="/img/star-off.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>
		<!-- for test form serialization -->
		<table class="task usr-func yui3-dd-drop yui3-dd-draggable" id="a5ce4479660b9334deeb288eb5166f60.3-6db398380e045d2b6d208cddeca84979">
			<tbody>
				<tr>
					<td class="rawData">{"_id": "a5ce4479660b9334deeb288eb5166f60", "_rev": "3-6db398380e045d2b6d208cddeca84979", "specification": "on task update we should first update the remote store", "priority": 2, "taskStartDate": [2010, 9, 19, 21, 9, 9], "taskCompleteDate": null, "progress": "in-progress", "taskCreateDate": [2010, 9, 19, 17, 4, 12], "deliversUserFunctionality": true, "solutionTeam": [], "title": "on task update update the remote store", "project": "PicoMinMin", "type": "task", "namespace": []}</td>
					<td><a class="collapsible" href="#">+</a></td>
					<td class="title">on task update update the remote store</td>
					<td class="statistic">0</td>
				</tr>
			</tbody>
		</table>

	</body>
</html>