
<html>
	<head>
		<script type="text/javascript" charset="utf-8" src="../../yui/build/yui/yui-debug.js"></script>
		<script>var serverData = {"project-name" : "PicoMinMin"};</script>
	</head>
	<body class="yui3-skin-sam">
		<h1>tasklist.js test</h1>
		
		<script type="text/javascript">
			YUI({
    			base: '../../yui/build/',
    			filter: "debug",
    			logInclude: { TestRunner: true},
				groups: {
					hokulea: {
						combine: false,
						base: './',
						filter: 'raw',
						modules: {
							task: {
								path: 'task.js'
							},
							tasklist: {
								path: 'tasklist.js'
							}
						}
					}
				}				
			}).use('node-event-simulate', 'test','console', 
			'dd-drop', 'dd-proxy', 'node-base', 
			'io', 'event', 'json-parse', 
			'querystring-stringify-simple', 'tasklist', 'task', function (Y) {
				var mockServer = {
					createTask: function(obj) {
						Y.Assert.isNotUndefined(obj.uri);
						Y.Assert.isNotUndefined(obj.sourceForm);
						this.called = 'createTask';
					},
					updateAppendTask: function(obj) {
						Y.Assert.isNotUndefined(obj.action);
						Y.Assert.isNotUndefined(obj.task);
						this.called = 'updateAppendTask';
					},
					getTask: function(obj) {
						Y.Assert.isNotUndefined(obj.id);
						this.called = 'getTask';
					}
				};
				var testcase = new Y.Test.Case({
					name: "tasklist test",
					
					_should: {
						error: {
							testAdditionOfTaskToIncorrectList: true
						}
					},
					
					testAdditionOfTaskToTaskList: function() {
						var nd = Y.one('#proposed');
						var taskList = new Y.hokulea.TaskList({
							name: 'proposed',
							root: nd,
							server: mockServer
						});
						Y.Assert.areEqual(0, taskList.get('tasks').length, 'the list starts out empty');
						
						var taskData = {"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"};
						taskList.addNewTask(taskData);
						Y.Assert.areEqual(1, taskList.get('tasks').length, 'after adding a task the number of tasks should become 1')
					},
					/**
					 * we should not be able to add a task to a list when progress != name
					 */
					testAdditionOfTaskToIncorrectList: function() {
						var nd = Y.one('#in-progress');
						var taskList = new Y.hokulea.TaskList({
							name: 'in-progress',
							root: nd,
							server: mockServer
						});
						Y.Assert.areEqual(0, taskList.get('tasks').length, 'the list starts out with one element');
						
						var taskData = {"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"};
						taskList.addNewTask(taskData);
					},
					
					testDeletionOfATask: function() {
						var nd = Y.one("#delivered");
						var taskList = new Y.hokulea.TaskList({
							name: 'delivered',
							root: nd,
							server: mockServer
						});
						Y.Assert.areEqual(1, taskList.get('tasks').length, 'should be one existing task');
						var node = taskList.removeTask('not exist');
						Y.Assert.isNull(node);
						node = taskList.removeTask('64dca73821060386b52188b6cc8e5a89');
						Y.Assert.isNotNull(node);
						Y.Assert.areEqual('64dca73821060386b52188b6cc8e5a89', node.getId());
						Y.Assert.areEqual(0, taskList.get('tasks').length, 'we should have removed the only task');
						var el = document.getElementById('64dca73821060386b52188b6cc8e5a89.1-d44f047f8b364777d96a8fa2b993de14');
						Y.Assert.isNull(el, 'and the node should be removed from the dom');	
					},
					
					testTaskUpdateShouldUpdateDomAndInternalObject: function() {
						var nd = Y.one('#test1');
						var taskList = new Y.hokulea.TaskList({
							name: 'test1',
							root: nd,
							server: mockServer
						});
						Y.Assert.areEqual(1, taskList.get('tasks').length, 'the list starts out with one element');
						var newData = {_id: "bcc6c02877cdefbeb69041c61ef5951a", _rev: "11-1865e2fb9041f2bfdc297bd63d54262a", specification: "non mutable properties like create-date should not be able to be changed by the client. other attributes - that are say boolean should not be sent as \"true\" to the back end", priority: null, taskStartDate: [2010, 9, 22, 10, 53, 2], taskCompleteDate: null, progress: "in-progress", taskCreateDate: [2010, 8, 28, 12, 27, 35], deliversUserFunctionality: false, solutionTeam: [], title: "condition some inbound objects", project: "PicoMinMin", type: "task", namespace: [{project: "validation"}]};
						taskList.updateTask(newData);
						var task = taskList.getTask("bcc6c02877cdefbeb69041c61ef5951a");
						Y.Assert.areEqual("11-1865e2fb9041f2bfdc297bd63d54262a", task.get('data')._rev, "the revision number should be updated");
						Y.Assert.areEqual('condition some inbound objects', task.get('data').title, 'the title should be updated');
						var node = task.get('node');
						Y.Assert.areEqual('bcc6c02877cdefbeb69041c61ef5951a.11-1865e2fb9041f2bfdc297bd63d54262a', node.get('id'), 'the node id value should be updated');
						var ndTitle = node.one('.title');
						Y.Assert.areEqual('condition some inbound objects', ndTitle.get('innerHTML'), 'the title on the page should be updated');
					}		
					
				});
		
			    var yconsole = new Y.Console({newestOnTop: false, height: '500px'});
			    yconsole.render('#logger');
				Y.Test.Runner.add(testcase);
			    Y.Test.Runner.run();

			});
		</script>
		
		<a href="#" id="new">new</a>
		<table class="buckets">
			<tbody>
				<tr>
					<td id="proposed" class="bucket">
						<div class="bmrcp-head">waiting to start</div>
						<div class="tasks">
						</div>
					</td>
					<td id="in-progress" class="bucket">
						<div class="bmrcp-head">work in progress</div>
						<div class="tasks">
							
						</div>
					</td>
					<td id="delivered" class="bucket">
						<div class="bmrcp-head">delivered to user</div>
						<div class="tasks">
							<!-- below is a example task to test the Task object -->
							<table id="64dca73821060386b52188b6cc8e5a89.1-d44f047f8b364777d96a8fa2b993de14" class="task yui3-dd-drop yui3-dd-draggable">
								<tbody>
									<tr>
										<td class="rawData">
											{"specification":"","priority":2,"_rev":"1-d44f047f8b364777d96a8fa2b993de14","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"64dca73821060386b52188b6cc8e5a89","type":"task","namespace":[]}
										</td>										
										<td><a href="#" class="collapsible">+</a></td>
										<td class="title">add task detail expansion functionality</td>
										<td class="statistic">0</td>
									</tr>
								</tbody>
							</table>							
						</div>
					</td>
					<td id="test1" class="bucket">
						<div class="bmrcp-head">test1</div>
						<div class="tasks">
							<table id="bcc6c02877cdefbeb69041c61ef5951a.4-1865e2fb9041f2bfdc297bd63d54262a" class="task n-usr-func yui3-widget yui3-task yui3-task-content yui3-dd-drop yui3-dd-draggable">
								<tbody>
									<tr>
										<td class="rawData">
											{"_id": "bcc6c02877cdefbeb69041c61ef5951a", "_rev": "4-1865e2fb9041f2bfdc297bd63d54262a", "specification": "non mutable properties like create-date should not be able to be changed by the client. other attributes - that are say boolean should not be sent as true to the back end", "priority": null, "taskStartDate": [2010, 9, 22, 10, 53, 2], "taskCompleteDate": null, "progress": "test1", "taskCreateDate": [2010, 8, 28, 12, 27, 35], "deliversUserFunctionality": false, "solutionTeam": [], "title": "condition all inbound objects", "project": "PicoMinMin", "type": "task", "namespace": [{"project": "validation"}]}
										</td>
										<td><a href="#" class="collapsible">+</a></td>
										<td class="title">condition all inbound objects</td>
										<td class="statistic">15</td>
									</tr>
								</tbody>
							</table>
						</div>
					</td>
				</tr>
			</tbody>
		</table>
		
		<div class="bmrcp-head"></div>
		
		<!-- a task nodes for testing serialization of priority values. Im also using
		these to test task to form conversion so I am being destructive with the second
		set of tests -->
		<table>
			<tr>
				<td id="testBucket" class="bucket">
					<div class="tasks">
						<table class="task" id="34c9c3adade7da214b70f96ea1418abb.1-ca66e995fa34333d682f04a00e98c3cb">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"1-ca66e995fa34333d682f04a00e98c3cb","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"34c9c3adade7da214b70f96ea1418abb","type":"task","namespace":[]}
								</td>								
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-off.gif" title="low" />
									<img class="clickable" src="/img/star-off.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>
						<table class="task" id="34c9c3adade7da214b70f96ea1418abc.1-ca66e995fa34333d682f04a00e98c3cc">
							<tr>
								<td class="rawData">
									{"specification":"","priority":2,"_rev":"1-ca66e995fa34333d682f04a00e98c3cc","taskStartDate":null,"taskCompleteDate":null,"progress":"delivered","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"34c9c3adade7da214b70f96ea1418abc","type":"task","namespace":[]}
								</td>								
								<td><a class="collapsible" href="#">+</a></td>
								<td class="title">password hashing for login</td>
								<td class="priority">
									<img class="clickable" src="/img/star-on.gif" title="low" />
									<img class="clickable" src="/img/star-on.gif" title="medium" />
									<img class="clickable" src="/img/star-off.gif" title="high" />
								</td>
							</tr>
						</table>			
					</div>	
				</td>
			</tr>
		</table>
		
		<table id="ff5e24a8b1351764edde8e98c74fc99d.7-e83166bf9a306826e1d2dbd4811e114e" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody>
				<tr>
					<td class="rawData">{"specification":"","priority":2,"_rev":"7-e83166bf9a306826e1d2dbd4811e114e","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,17,0,0,0],"deliversUserFunctionality":true,"title":"we want to add tagging to the tasks","project":"PicoMinMin","_id":"ff5e24a8b1351764edde8e98c74fc99d","type":"task","namespace":[]}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">we want to add tagging to the tasks</td>
					<td class="priority">
						<img title="low" src="/img/star-on.gif" class="clickable">
						<img title="medium" src="/img/star-on.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>
		
		<table id="f6c73e27c5e4258c8457e8bfaf1a79c4.1-b81de00d061621947aac747f794b01af" class="task usr-func yui3-dd-drop yui3-dd-draggable">
			<tbody
				><tr>
					<td class="rawData">{"specification":"store all the dates as UCT that way there are no issues depending on where in the world people are using the application","priority":null,"_rev":"1-b81de00d061621947aac747f794b01af","taskStartDate":null,"taskCompleteDate":null,"progress":"proposed","taskCreateDate":[2010,8,28,12,54,56],"deliversUserFunctionality":true,"solutionTeam":[],"title":"store dates as UCT","project":"PicoMinMin","_id":"f6c73e27c5e4258c8457e8bfaf1a79c4","type":"task","namespace":"project=database"}</td>
					<td><a href="#" class="collapsible">+</a></td>
					<td class="title">store dates as UCT</td>
					<td class="priority">
						<img title="low" src="/img/star-off.gif" class="clickable">
						<img title="medium" src="/img/star-off.gif" class="clickable">
						<img title="high" src="/img/star-off.gif" class="clickable">
					</td>
				</tr>
			</tbody>
		</table>

		
	</body>
</html>